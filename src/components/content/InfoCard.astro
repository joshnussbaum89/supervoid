---
export interface Props {
  text: string
  column?: number
}

const { text, column } = Astro.props
---

<article class="info-card" data-column={column}>
  <p>{text}</p>
</article>

<style>
  .info-card {
    position: relative;
    padding: 1.5rem;
    background-color: var(--color-black);
    border: 4px solid var(--color-white);
    transition: all var(--transition-long);

    &::after {
      content: '';
      position: absolute;
      top: -20px;
      left: 10px;
      width: 100%;
      height: 100%;
      z-index: -1;
      transition: all var(--transition-long);
    }

    @media (max-width: 768px) {
      &.active::after {
        top: 0;
        left: 0;
        opacity: 0;
      }
    }

    @media (min-width: 768px) {
      &:hover::after {
        top: 0;
        left: 0;
        opacity: 0;
      }
    }

    &:nth-of-type(1) {
      margin-bottom: 4rem;
    }

    @media (max-width: 768px) {
      &[data-column='1'].active {
        border: 4px solid var(--color-purple);
        box-shadow: 0 0 20px var(--color-purple);
      }
    }

    @media (min-width: 768px) {
      &[data-column='1']:hover {
        border: 4px solid var(--color-purple);
        box-shadow: 0 0 20px var(--color-purple);
      }
    }

    @media (max-width: 768px) {
      &[data-column='2'].active {
        border: 4px solid var(--color-red);
        box-shadow: 0 0 20px var(--color-red);
      }
    }

    @media (min-width: 768px) {
      &[data-column='2']:hover {
        border: 4px solid var(--color-red);
        box-shadow: 0 0 20px var(--color-red);
      }
    }

    @media (max-width: 768px) {
      &[data-column='3'].active {
        border: 4px solid var(--color-green);
        box-shadow: 0 0 20px var(--color-green);
      }
    }

    @media (min-width: 768px) {
      &[data-column='3']:hover {
        border: 4px solid var(--color-green);
        box-shadow: 0 0 20px var(--color-green);
      }
    }

    &[data-column='1']::after {
      border: 4px solid var(--color-purple);
    }

    &[data-column='2']::after {
      border: 4px solid var(--color-red);
    }

    &[data-column='3']::after {
      border: 4px solid var(--color-green);
    }

    & p {
      font-size: var(--size-sm);
      text-transform: none;
      cursor: default;
    }
  }
</style>

<script>
  /**
   * Fade in cards when they come into view
   */
  function handleCardFadeOnScroll() {
    const cards = document.querySelectorAll('.info-card') as NodeListOf<HTMLElement>

    if (cards.length !== 0) {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.75,
      }

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const card = entry.target as HTMLElement

          if (entry.isIntersecting) {
            card.classList.add('active')
          } else {
            card.classList.remove('active')
          }
        })
      }, options)

      cards.forEach((card) => observer.observe(card))
    }
  }

  // Initialize IntersectionObserver on page load
  document.addEventListener('astro:page-load', () => {
    // Check if IntersectionObserver is supported
    if (!window.IntersectionObserver) return console.log('IntersectionObserver not supported')

    // Fade in cards on scroll
    document.addEventListener('scroll', handleCardFadeOnScroll)
  })
</script>
